// get all resources
kubectl get all

// get more details
kubectl get pods -o wide

// get resource with a label
kubectl get pods --selector app=frontend
kubectl get all --selector bu=finance,env=prod,tier=frontend

// generate yaml with dry-run
kubectl run redis --image=redis --dry-run=client -o yaml
// save to file
kubectl run redis --image=redis --dry-run=client -o yaml > redis.yml

// create pod from file
kubectl create -f redis.yml

// specify a port on container when running a pod
kubectl run nginx --image=nginx --port=8080

// apply changes from a yml file
kubectl apply -f redis.yml

// extract yml from a pod
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

// edit a pod (not everything is editable)
kubectl edit pod <pod-name>

// get replicaset
kubectl get replicaset
kubectl get rs

// get replicaset yaml
kubectl get replicaset new-replica-set -o yaml > replica.yaml

// edit replicaset
kubectl edit rs <rs-name>

// delete replicaset
kubectl delete replicaset <replicaset-name>

// replace replicaset configs from file
kubectl replace -f replicaset-definition.yml

// scale replicaset manually
kubectl scale --replicas=6 -f <file-name>
kubectl scale --replicas=6 replicaset <replicaset-name>

// get deployments
kubectl get deployments
kubectl get deploy

// create deployment
kubectl create -f deployment.yml
kubectl create deployment nginx --image=nignx --replicas=3

// set/update version of an image in deployment
kubectl set image deployment/my-deployment nginx=nignx:1.9.1

// scale deployment
kubectl scale deployment nginx --replicas=4

// create namespace
kubectl create -f namespace.yml
kubectl create namespace <name>

// set default namespace
kubectl config set-context $(kubectl config current-context) --namespace=<name>

// get resource in namespace
kubectl get pods --namespace=dev
kubectl get pods --all-namespaces or kubectl get pods -A

// get services
kubectl get service
kubectl get svc

// create a clusterIP service along with the pod (needs the port)
kubectl run nginx --image=nignx --port=80 --expose=true

// Start a pod using the default command, but use custom arguments (arg1 .. argN) for that command
  kubectl run nginx --image=nginx -- <arg1> <arg2> ... <argN>
  
// Start the pod using a different command and custom arguments
kubectl run nginx --image=nginx --command -- <new-cmd> <arg1> ... <argN>

// create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080

// create configmap
kubectl create -f configmap.yml 
kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
kubectl create configmap my-config --from-env-file=path/to/foo.env
kubectl create configmap my-config --from-file=path/to/bar

// get and describe configmaps
kubectl get configmaps
kubectl describe configmaps
kubectl describe configmap my-config

// create secret
kubectl create -f secret.yml 
kubectl create secret generic my-secret --from-literal=key1=secret2 --from-literal=key2=secret2
kubectl create secret generic my-secret --from-file=path/to/bar
kubectl create secret tls  webhook-server-tls --namespace=webhook-demo  --cert=/keys/webhook-server-tls.crt --key=/keys/webhook-server-tls.key

// get and describe secrets
kubectl get secrets
kubectl get secret my-secret -o yaml
kubectl describe secrets

// base64 encode decode
echo -n 'secret' | base64
echo -n 'c2VjcmV0' | base64 --decode

// get service accounts
kubectl get serviceaccounts
kubectl describe serviceaccount <name>

// create serviceaccount
kubectl create serviceaccount <name>

// generate token for a serviceaccount
kubectl create token <sa-name>

// Taint a node
kubectl taint nodes <node-name> key=value:<taint-effect> 						# taint effect: what to do with the pods that can't "tolerate" this
// Taint effects: NoSchedule | PreferNoSchedule | NoExecute
kubectl taint nodes my-node app=blue:NoSchedule

// untaint a node (add a - suffix)
kubectl taint nodes my-node app=blue:NoSchedule-

// get taints of a node
kubectl describe nodes <node-name> | grep Taints

// label a node
kubectl label nodes <node-name> key1=value1

// show nodes with labels
kubectl get nodes --show-labels

// add metrics-server through minikube
minikube addons enable metrics-server
// for other kubernetes environments you need to clone the metrics-sever git repo

// view performance metrics of nodes
kubectl top node

// view performance metrics of pods
kubectl top pod

// get rollout status of a deployment
kubectl rollout status deployment/my-deployment

// get rollout history of a deployment
kubectl rollout history deployment/my-deployment

// check the status of each revision individually by using the --revision flag
kubectl rollout history deployment nginx --revision=1

// rollback a deployment to a previous revision
kubectl rollout undo deployment/my-deployment

// To rollback to specific revision we will use the --to-revision flag
kubectl rollout undo deployment/my-deployment --to-revision=1

//use the --record flag to save the command used to create/update a deployment against the revision number
kubectl set image deployment nginx nginx=nginx:1.17 --record

// create job or cronjob from definition file
kubectl create -f job-definition.yml

// Create a job
kubectl create job my-job --image=busybox

// Create a job with a command
kubectl create job my-job --image=busybox -- date

// Create a job from a cron job named "a-cronjob"
kubectl create job test-job --from=cronjob/a-cronjob

// get jobs and cronjob
kubectl get jobs
kubectl get cronjob

// delete job and cronjob
kubectl delete job <name>
kubectl delete cronjob <name>

// get persistent volumes
kubectl get persistentvolume

// get PVCs
kubectl get persistentvolumeclaim

// delete PVC
kubectl delete persistentvolumeclaim mypvc

// view kube config
kubectl config view

// change the context of kube config
kubectl config use-context prod-user@production

// provide custom config file while switching context
kubectl config use-context prod-user@production --kubeconfig /root/myconfig

// get and describe roles (Role Based Access control)
kubectl get roles
kubectl describe role <name>

// get and describe role bindings
kubectl get rolebindings
kubectl describe rolebinding <name>

// check if you can perform certain action
kubectl auth can-i create deployments

// check access for other users (for administrators only)
kubectl auth can-i create deployments --as dev-user
kubectl auth can-i create deployments --as dev-user --namespace

// view enabled admission controllers by default
kube-apiserver -h | grep enable-admission-plugins
// where kube-apiserver isn't available directly
kubectl exec -it kube-apiserver-controlplane -n kube-system -- kube-apiserver -h | grep enable-admission-plugins 

// kube api-server manifest file
/etc/kubernetes/manifests/kube-apiserver.yaml

//Since the kube-apiserver is running as pod you can check the process to see enabled and disabled plugins.
ps -ef | grep kube-apiserver | grep admission-plugins

// convert a yaml resource version to another (may not be available, separete plugin)
kubectl convert -f nginx.yml --output-version apps/v1

// start a kubernetes proxy server on port
kubectl proxy 8001
// run on background
kubectl proxy 8001&

// get name of the OS installed
cat /etc/*release*

// Helm charts
Chart = templates + values
template = kubernetes resource files with variables for the properties that we wanna controll through Helm
values.yml = values for all the variables used in the templates

// search Helm hub for charts/packages
helm search hub <name>

// add a new chart repository
helm repo add bitnami https://charts.bitnami.com/bitnami

// search in the added repos
helm search repo <name>

// list repos
helm repo list

// install/deploy a chart
helm install <release-name> <chart-name>
helm install release-1 wordpress

// list and delete installed charts
helm list
helm uninstall <release-name>

// only download the chart but don't deploy it
helm pull --untar bitnami/wordpress

// check connection of one pod to another
kubectl exec -it <pod-name> -- sh
nc -v -z -w 2 <another-pod-service> <port>